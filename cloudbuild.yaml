substitutions:
  _SERVICE_NAME: home
  _PROD_DOMAIN: unfederalreserve.com
  _DEV_DOMAIN: unfederalreservetesting.com
  _NOTIFICATION_GROUP: ecosystem
steps:

# init environment
- name: 'gcr.io/cloud-builders/yarn'
  id: init
  waitFor: ['-']
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo > .cloudbuild.env.sh

      echo "export PROJECT_NAME=$(cut -d '-' -f1 <<< $PROJECT_ID)" >> .cloudbuild.env.sh

      if [ "$BRANCH_NAME" = "master" ]; then
        echo 'export CLUSTER_NAME=master' >> .cloudbuild.env.sh
        echo 'export DOMAIN=$_PROD_DOMAIN' >> .cloudbuild.env.sh
      fi
      if [ "$BRANCH_NAME" = "stage" ]; then
        echo 'export CLUSTER_NAME=stage' >> .cloudbuild.env.sh
        echo 'export URL_ENV_PART=-stage' >> .cloudbuild.env.sh
        echo 'export DOMAIN=$_DEV_DOMAIN' >> .cloudbuild.env.sh
      fi
      if [ "$BRANCH_NAME" = "dev" ] || [ "$BRANCH_NAME" = "nikolay" ]; then
        echo 'export CLUSTER_NAME=dev' >> .cloudbuild.env.sh
        echo 'export URL_ENV_PART=-dev' >> .cloudbuild.env.sh
        echo 'export DOMAIN=$_DEV_DOMAIN' >> .cloudbuild.env.sh
      fi

      yarn install

- name: 'gcr.io/cloud-builders/yarn'
  id: build
  waitFor:
    - init
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      . ./.cloudbuild.env.sh
      if [ "$BRANCH_NAME" = "master" ] || [ "$BRANCH_NAME" = "stage" ] || [ "$BRANCH_NAME" = "dev" ]; then
        export $(cat ./.env.$BRANCH_NAME | sed 's/#.*//g' | xargs)
      else
        export $(cat ./.env.dev | sed 's/#.*//g' | xargs)
      fi

      yarn build

# build docker image
- name: 'gcr.io/cloud-builders/gsutil'
  id: deploy
  waitFor:
    - build
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      . ./.cloudbuild.env.sh

      if [ "$$CLUSTER_NAME" = "" ]; then
        echo "Not building on branch $BRANCH_NAME"
        exit;
      fi

      cp -r staticdata/img/sharing-image.jpg dist/img

      cp robots.txt dist/

      cd dist

      if [ "$BRANCH_NAME" = "master" ] || [ "$BRANCH_NAME" = "stage" ] || [ "$BRANCH_NAME" = "dev" ]; then
        gsutil -m -h "Cache-Control:public,max-age=1209600" cp -z html,js,css,svg -R * gs://$$PROJECT_NAME-$$CLUSTER_NAME-$_SERVICE_NAME
        gsutil setmeta -h "Cache-Control:private, max-age=0, no-transform" gs://$$PROJECT_NAME-$$CLUSTER_NAME-$_SERVICE_NAME/index.html
        gsutil setmeta -h "Cache-Control:private, max-age=0, no-transform" gs://$$PROJECT_NAME-$$CLUSTER_NAME-$_SERVICE_NAME/js/*

        gcloud compute url-maps invalidate-cdn-cache apps-https-lb --async --path "/index.html" --host="$_SERVICE_NAME$$URL_ENV_PART.$$DOMAIN"
        gcloud compute url-maps invalidate-cdn-cache apps-https-lb --async --path "/*" --host="$_SERVICE_NAME$$URL_ENV_PART.$$DOMAIN"
      elif [ "$BRANCH_NAME" = "nikolay" ]; then
        gsutil -m -h "Cache-Control:public,max-age=1209600" cp -z html,js,css,svg -R * gs://$$PROJECT_NAME-$$CLUSTER_NAME-$_SERVICE_NAME-$BRANCH_NAME
        gsutil setmeta -h "Cache-Control:private, max-age=0, no-transform" gs://$$PROJECT_NAME-$$CLUSTER_NAME-$_SERVICE_NAME-$BRANCH_NAME/index.html
        gsutil setmeta -h "Cache-Control:private, max-age=0, no-transform" gs://$$PROJECT_NAME-$$CLUSTER_NAME-$_SERVICE_NAME-$BRANCH_NAME/js/*
      else
        exit 0
      fi
